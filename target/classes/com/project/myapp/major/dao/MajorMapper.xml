<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.project.myapp.major.dao.MajorRepository">
	
	<!-- 학과 불러오기 -->
	<select id="majorList" parameterType="Criteria" resultType="MajorVo">
		select *
		from (select rownum rn, major,salary,employment,summary,lclass,uni,DEPARTMENT
		from majorDetail
		<if test="search != null">
			WHERE major like '%'|| #{search} ||'%' 
		</if>
			 )
		where rn between ((#{pageNum}-1) * 10) + 1 and #{pageNum} * 10
	</select>
	
	<!-- 학과 세부 정보 -->
	<select id="majorDetail" parameterType="String" resultType="MajorVo">
		SELECT * FROM MAJORDETAIL WHERE major = #{major}
	</select>
	
	<!-- 학과 리스트 토탈 개수 -->
	<select id="majorTotal" parameterType="Criteria" resultType="int">
		select count(*)  from majorDetail
			  <if test="search != null">
			  WHERE major LIKE '%'||#{search}||'%'
			  </if>
	
	</select>
	
	<!-- 추천 학과 토탈 -->
	<select id="majorRecommend" resultType="MajorVo" parameterType="MajorTest">
		select *
		<if test="priority.equals('SATISFACTIONDATA')"><!-- 직업만족도일 경우 매우만족이 5번째에 있으니  @로 나누고 5번째 값으로 정렬한다. -->
			from(select ROW_NUMBER() OVER (ORDER BY TO_NUMBER(REGEXP_SUBSTR (${priority},'[^@]+', 1, 5)) desc,<!--매우만족이 제일 높은 순으로 정렬 숫자로 변경해야 값이 제대로 정렬된다.-->
				 TO_NUMBER(REGEXP_SUBSTR (${priority}, '[^@]+', 1, 4)) desc)as rn, <!-- 만약 매우 만족이 동일하면 만족 순으로 정렬하고 이름 rn으로 숫자로 변경해야 값이 제대로 정렬된다 이름은 rn으로 -->
		   	     REGEXP_SUBSTR (#{priority}, '[^@]+', 1, 5)as priority , 
		   	     m.* <!-- 나머지 전부 출력 --> 
				 from majorDetail m

		</if>
		
		<if test="!priority.equals('SATISFACTIONDATA')"><!-- 직업 만족도가 아닌 보상, 취업률일 경우 첫번째에 값이 있으니 처음 값으로  비교한다. -->
			from(select ROW_NUMBER() OVER (ORDER BY TO_NUMBER(REGEXP_SUBSTR (${priority},'[^@]+', 1, 1)) desc)as rn,
				 REGEXP_SUBSTR (#{priority},'[^@]+', 1, 1)as priority ,m.*
				 from majorDetail m
		</if>
		
		<where>
				<!-- 학교 유형 전부 선택 인지 확인 -->
		<choose>
			<when test="!lclass.equals('all') and !uni.equals('all')">
				  Lclass like #{lclass} and uni like #{uni}
			</when>
			<when test="!lclass.equals('all') and uni.equals('all')">
				  lclass like #{lclass}
			</when>
			<when test="lclass.equals('all') and !uni.equals('all')">
				  uni like #{uni}
			</when>
		</choose>
		
		<if test="money.equals('경제적으로 힘든 상황') or time.equals('온라인만 가능')">
			and (m.schoolname like '%한국방송통신%' or m.schoolname like '%사이버%')
		</if>
		
		</where>

		)
		where rn BETWEEN 1 and 10
	</select>
	
</mapper>